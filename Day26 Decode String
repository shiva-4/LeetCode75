Day26
Given an encoded string, return its decoded string.
The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

The test cases are generated so that the length of the output will never exceed 105.
Example 1:

Input: s = "3[a]2[bc]"
Output: "aaabcbc"
Example 2:

Input: s = "3[a2[c]]"
Output: "accaccacc"
Example 3:

Input: s = "2[abc]3[cd]ef"
Output: "abcabccdcdcdef"

Constraints:

1 <= s.length <= 30
s consists of lowercase English letters, digits, and square brackets '[]'.
s is guaranteed to be a valid input.
All the integers in s are in the range [1, 300].

Solution:
class Solution:
    def decodeString(self, s: str) -> str:
        stack = []  # Stack to store previous strings and multipliers
        current_string = ""  # Stores currently decoded string
        current_num = 0  # Stores the number before '['

        for char in s:
            if char.isdigit():  # If it's a number, build it (handles multi-digit numbers)
                current_num = current_num * 10 + int(char)
            elif char == '[':  # Push current string and number to stack
                stack.append((current_string, current_num))
                current_string = ""  # Reset for inner decoding
                current_num = 0  # Reset multiplier
            elif char == ']':  # When ']' is found, pop from stack and repeat
                prev_string, num = stack.pop()
                current_string = prev_string + num * current_string  # Expand and combine
            else:  # If it's a letter, add it to current string
                current_string += char

        return current_string  # Return the final decoded string
